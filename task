//1 CREATE DATABASE

CREATE DATABASE ecommerce;
USE e-commerce;

//2 CREATE TABLES

//First Create Customer Table

CREATE TABLE customers (
id INT AUTO_INCREMENT PRIMARY KEY,
name VARCHAR(100) NOT NULL,
email VARCHAR(100) UNIQUE,
address VARCHAR(255) NOT NULL
);

DESCRIBE customers;

//Second Create Orders Table

CREATE TABLE orders(
id INT AUTO_INCREMENT PRIMARY KEY,
customer_id INT,
order_date DATE,
total_amount DECIMAL(10,2),
FOREIGN KEY(customer_id) REFERENCES customers(id)
);

DESCRIBE orders;

//Third.Create Products Table

CREATE TABLE products (
id INT AUTO_INCREMENT PRIMARY KEY,
name VARCHAR(100),
price DECIMAL(10,2),
description TEXT
);

DESCRIBE products;

//3 INSERT DATA 

//Insert Customers Data

INSERT INTO customers (name, email, address) 
VALUES
('Abishek', 'abishek@gmail.com', '12 North St'),
('Kavi', 'kavi@gmail.com', '36 South St'),
('Mithran', 'mithran@gmail.com', '78 West St');

//Insert Orders Data

INSERT INTO orders (customer_id, order_date, total_amount) 
VALUES
(1, '2024-09-05', 100.00),
(2, '2024-09-15', 200.00),
(1, '2024-09-25', 150.00);

//Insert Products Data

INSERT INTO products (name, price, description) 
VALUES
('Product A', 50.00, 'Description for Product A'),
('Product B', 30.00, 'Description for Product B'),
('Product C', 40.00, 'Description for Product C');

select * from customers;
select * from orders;
select * from products;

//Queries

//1.Retrieve all customers who have placed an order in the last 30 days

SELECT DISTINCT customers.*
FROM customers
JOIN orders ON customers.id = orders.customer_id
WHERE orders.order_date >= curdate() - INTERVAL 30 DAY;

//2.Get the total amount of all orders placed by each customer

SELECT customers.name, SUM(orders.total_amount) AS total_spent
FROM customers
JOIN orders ON customers.id = orders.customer_id
GROUP BY customers.name;

//3.Update the price of Product C to 45.00

UPDATE products
SET price = 45.00
WHERE id = 3;

select * from products;

//4.Add a new column discount to the products table

ALTER TABLE products
ADD COLUMN discount DECIMAL(5, 2) DEFAULT 0.00;

select * from products;

//5.Retrieve the top 3 products with the highest price

SELECT name,price 
FROM products 
ORDER BY price DESC 
LIMIT 3;

//6.Get the names of customers who have ordered Product A

SELECT DISTINCT customers.name
FROM customers
JOIN orders ON customers.id = orders.customer_id
JOIN products ON orders.id = products.id
WHERE products.name = 'Product A';

//7.Join the orders and customers tables to retrieve the customer's name and order date for each order

SELECT customers.name, orders.order_date
FROM customers
JOIN orders ON customers.id = orders.customer_id;

//8.Retrieve the orders with a total amount greater than 150.00

SELECT *
FROM orders
WHERE total_amount > 150.00;

//9.Normalize the database by creating a separate table for order items and updating the orders table to reference the order_items table

CREATE TABLE order_items (
id INT AUTO_INCREMENT PRIMARY KEY,
order_id INT,
product_id INT,
quantity INT,
FOREIGN KEY(order_id) REFERENCES orders(id),
FOREIGN KEY(product_id) REFERENCES products(id)
);

DESCRIBE order_items;

INSERT INTO order_items (order_id, product_id, quantity) 
VALUES
(1,1,2),
(2,2,1),
(3,1,1);

SELECT * FROM order_items;

//10.Retrieve the average total of all orders

SELECT AVG(total_amount)
FROM orders;
